// MPM1D

// Linear Systems
// class lineQuestion extends QuestionClass {
//     constructor(question, type, details, desmosGraph, answers) {
//         super(question, type, details, desmosGraph, answers)
//             this.frac =  Math.floor(Math.random() * 2)
//             this.m = Math.floor(Math.random() * 20) - 10
//             this.b = Math.floor(Math.random() * 20) - 10
//             this.expression = ""
//             this.slope = ""
//             this.generateExpression = () => {
                
//                 // generate new values for m and b if both of them are equal to 0
//                 while (this.m === 0 && this.b === 0 || Math.abs(this.m) === Math.abs(this.b) || this.m === 0) {
//                     console.log("m and b cannot both be zero. Regenerating values for a and b...")
//                     this.m = Math.floor(Math.random() * 20) - 10
//                     this.b = Math.floor(Math.random() * 20) - 10
//                 }

//                 this.slope = this.m

//                 let sign = ""
//                 if (this.b > 0 && this.m !== 0) {
//                     sign = "+"
//                 }

//                 if (this.frac !== 0) {
//                     while (this.frac === 1 || this.b === this.frac || this.frac === 0) {
//                         this.frac = Math.ceil(Math.random() * 10) + 1
//                     }
          

//                     this.slope = simplify(`${this.m} / ${this.frac}`)
                    
//                     console.log(this.m, this.frac, this.b, this.slope)
//                     this.expression = `y=${Math.abs(this.m / this.frac) !== 1 ? `${this.slope.toTex()}x` : (this.m / this.frac) === 1 ? `x` : `-x`} ${this.b !== 0 ? `${sign}${this.b}` : ""}`
//                 }
//                 else {
//                     console.log(this.m, this.frac, this.b, this.slope)
//                     this.expression = `y=${this.m === 1 ? 'x' : `${this.m}x`} ${this.b !== 0 ? `${sign}${this.b}` : ""}`
//                 }
//             }
//         }
// }

// ------------------------------------------------------------
// Line Questions

// let lineQuestion1 = new lineQuestion(
//     'what is the slope of this line?',
//     MULTIPLE_CHOICE,
//     {
//         strand: 'equation of lines',
//         course: MPM1D,
//         questionInfo: 'assess knowledge of slopes and y-intercepts'
//     },
// )

// lineQuestion1.generateExpression();

// addAnswers(
//     lineQuestion1, 
//     [`${simplify(lineQuestion1.slope).toTex()}`, `${lineQuestion1.b}`, simplify(`-${lineQuestion1.slope}`).toTex()], 
//     [true, false, false]
// )

// let lineQuestion2 = new lineQuestion(
//     'what is the y-intercept of this line?',
//     MULTIPLE_CHOICE,
//     {
//         strand: 'equation of lines',
//         course: MPM1D,
//         questionInfo: 'assess knowledge of y-intercepts of lines'
//     }
// )

// lineQuestion2.generateExpression();

// addAnswers(
//     lineQuestion2, 
//     [`${simplify(lineQuestion2.slope).toTex()}`, `${lineQuestion2.b}`, simplify(`-${lineQuestion2.slope}`).toTex()], 
//     [false, true, false]
// )

// let lineQuestion3 = new lineQuestion(
//     'Is the slope of the line positive or negative?',
//     MULTIPLE_CHOICE,
//     {
//         strand: 'equation of lines',
//         course: MPM1D,
//         questionInfo: 'assess knowledge of slopes'
//     }
// )

// lineQuestion3.generateExpression();

// addAnswers(
//     lineQuestion3,
//     ['{\\text{positive}}', '{\\text{negative}}', '{\\text{none of these}}'],
//     [lineQuestion3.m > 0 ? true : false, lineQuestion3.m < 0 ? true : false, lineQuestion3.m === 0 ? true : false]
// )

// let lineQuestion4 = new lineQuestion(
//     'What is the x-intercept of this line?',
//     MULTIPLE_CHOICE,
//     {
//         strand: 'equation of lines',
//         course: MPM1D,
//         questionInfo: 'assess knowledge of slopes'
//     },
// )

// lineQuestion4.generateExpression();

// addAnswers(
//     lineQuestion4,
//     [`${simplify(lineQuestion4.slope).toTex()}`, lineQuestion4.b !== 0 ? `${lineQuestion4.b}` : `${simplify(lineQuestion4.m * 2)}`, lineQuestion4.frac === 0 ? simplify(`-${lineQuestion4.b} / ${lineQuestion4.m}`).toTex() : simplify(`-(${lineQuestion4.b} * ${lineQuestion4.frac} / ${lineQuestion4.m} )  `).toTex() ],
//     [false, false, true],
//     {
//         showGraph: true,
//         expression: [
//             {
//                 latex: `y=${lineQuestion4.slope.toString()}x+${lineQuestion4.b}`
//             }
//         ]
//     }
// )

// let lineQuestion5 = new lineQuestion(
//     'What is the y-intercept of this line?',
//     MULTIPLE_CHOICE,
//     {
//         strand: 'equation of lines',
//         course: MPM1D,
//         questionInfo: 'assess knowledge of slopes'
//     },
// )

// lineQuestion5.generateExpression();

// addAnswers(
//     lineQuestion5,
//     [`${simplify(lineQuestion5.slope).toTex()}`, lineQuestion5.b !== 0 ? `${lineQuestion5.b}` : `${simplify(lineQuestion5.m * 2)}`, lineQuestion5.frac === 0 ? simplify(`-${lineQuestion5.b} / ${lineQuestion5.m}`).toTex() : simplify(`-(${lineQuestion5.b} * ${lineQuestion5.frac} / ${lineQuestion5.m} )  `).toTex() ],
//     [false, true, false],
//     {
//         showGraph: true,
//         expression: [
//             {
//                 latex: `y=${lineQuestion5.slope.toString()}x+${lineQuestion5.b}`,
//             }
//         ]
//     }
// )